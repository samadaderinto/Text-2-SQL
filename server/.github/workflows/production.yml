name: "Deploy to Production"
on:
  push:
    branches:
      - main

jobs:
  build-prod:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@master

      - uses: chrnorm/deployment-action@v2
        name: Create GitHub deployment
        id: deployment
        with:
          token: "${{ github.token }}"
          environment: development

      - name: Setup SSH Tunnel
        run: mkdir ~/.ssh &&
          ssh-keyscan -H ${{ secrets.JUMP_HOST }} >> ~/.ssh/known_hosts &&
          eval `ssh-agent -s` &&
          ssh-add - <<< "${{secrets.SSH_KEY}}" &&
          ssh -N -f -v -L ${{ secrets.SOURCE_PORT }}:${{ secrets.PROD_HOST }}:${{ secrets.DEST_PORT }} -i /dev/stdin ${{ secrets.USER }}@${{ secrets.JUMP_HOST }}

      - name: Publish To Server
        uses: easingthemes/ssh-deploy@main
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_KEY }}
          REMOTE_HOST: 127.0.0.1
          REMOTE_USER: ${{ secrets.USER }}
          ARGS: --exclude=".env*" --exclude="**/__pycache__" --exclude="static" --exclude="pm.json" --exclude="assets" -at --delete
          REMOTE_PORT: ${{ secrets.SOURCE_PORT }}
          TARGET: ${{ secrets.TARGET }}

      - name: Build Docker Service
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.DEST_PORT }}
          proxy_host: ${{ secrets.JUMP_HOST }}
          proxy_username: ${{ secrets.USER }}
          proxy_key: ${{ secrets.SSH_KEY }}
          proxy_port: ${{ secrets.DEST_PORT }}
          script: cd ${{secrets.TARGET}} &&
            docker-compose build

    
      - name: Run Migrations
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.DEST_PORT }}
          proxy_host: ${{ secrets.JUMP_HOST }}
          proxy_username: ${{ secrets.USER }}
          proxy_key: ${{ secrets.SSH_KEY }}
          proxy_port: ${{ secrets.DEST_PORT }}
          script: cd ${{secrets.TARGET}} &&
            docker-compose run server pipenv run python3 manage.py migrate


      - name: Collect Static Files
        uses: appleboy/ssh-action@master
        with:
            host: ${{ secrets.PROD_HOST }}
            username: ${{ secrets.USER }}
            key: ${{ secrets.SSH_KEY }}
            port: ${{ secrets.DEST_PORT }}
            proxy_host: ${{ secrets.JUMP_HOST }}
            proxy_username: ${{ secrets.USER }}
            proxy_key: ${{ secrets.SSH_KEY }}
            proxy_port: ${{ secrets.DEST_PORT }}
            script: cd ${{secrets.TARGET}} &&
                docker-compose run server pipenv run python3 manage.py collectstatic --no-input

      - name: Start Service
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.DEST_PORT }}
          proxy_host: ${{ secrets.JUMP_HOST }}
          proxy_username: ${{ secrets.USER }}
          proxy_key: ${{ secrets.SSH_KEY }}
          proxy_port: ${{ secrets.DEST_PORT }}
          script: cd ${{secrets.TARGET}} &&
            docker-compose up -d

      - name: Prune docker artifacts
        uses: appleboy/ssh-action@master
        with:
            host: ${{ secrets.DEV_HOST }}
            username: ${{ secrets.USER }}
            key: ${{ secrets.SSH_KEY }}
            port: ${{ secrets.DEST_PORT }}
            proxy_host: ${{ secrets.JUMP_HOST }}
            proxy_username: ${{ secrets.USER }}
            proxy_key: ${{ secrets.SSH_KEY }}
            proxy_port: ${{ secrets.DEST_PORT }}
            script: (echo y | docker container prune) && (echo y | docker volume prune) && (echo y | docker image prune)

      - name: Update deployment status (success)
        if: success()
        uses: chrnorm/deployment-status@v2
        with:
          token: "${{ github.token }}"
          environment-url: ${{ steps.deployment.outputs.environment_url }}
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}
          state: "success"

      - name: Update deployment status (failure)
        if: failure()
        uses: chrnorm/deployment-status@v2
        with:
          token: "${{ github.token }}"
          environment-url: ${{ steps.deployment.outputs.environment_url }}
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}
          state: "failure"
